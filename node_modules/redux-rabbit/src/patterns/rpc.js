import CJ from 'circular-json';
import PatternBase from './patternbase';

export default class rpc extends PatternBase {

	constructor( props ) {

		super( props );
	}

	/**
		Invoke a method in an RPC ( REST-LIKE ) means.

		@param String queue - the name of the queue youd like to invoke
		@param Object message - the props object for this invocation. eg { username: 'bren', password: 'mypass' }
		@param Function callback - OPTIONAL, a callback to fire with the response ; the response will be CJ parsed
		@param Object options - OPTIONAL header options to pass on with your STOMP request - see https://www.rabbitmq.com/stomp.html for details

		@return Promise - resolves with the CJ parsed reponse from the server.
	**/
	invoke( queue, message, callback, options ) {

		return new Promise( ( resolve, reject ) => {

			var responseQueue;

			options = options || {};

			options[ 'durable' ] = options.durable === undefined ? false : options.durable;
			options[ 'auto-delete' ] = options.autoDelete || false;
			options[ 'exclusive' ] = options.exclusive || false;

			if( typeof message === 'function' )
				return console.warn( 'rpc.invoke, message can only be a string, array or object, not a function' );

			if( typeof message === 'object' )
				message = CJ.stringify( message );

			responseQueue = 'RESP-' + parseInt( Math.random() * 10000000, 10 );
			options[ 'reply-to' ] = responseQueue;

			this.client.subscribe( '/queue/' + responseQueue, ( frame ) => {

				var response;

				if( frame.body && ( typeof frame.body === 'string' ) && ( frame.body.length > 2 ) )
					response = CJ.parse( frame.body );

				if( callback && typeof callback === 'function' )
					callback( response );

				this.client.unsubscribe( responseQueue );
				resolve( response );

			},{ id: responseQueue, 'auto-delete' : true });
			this.client.send( '/queue/' + queue, options, message );

		});
	}

	provide( queue ) {

		console.log( 'Frontend RPC consumption is unimplemented at this time.' );
	}
}
