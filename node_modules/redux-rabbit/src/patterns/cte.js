import CJ from 'circular-json'
import PatternBase from './patternbase';

export default class cte extends PatternBase {

	constructor( props ) {

		super( props );
	}


	/**
		Invoke a method in an RPC ( REST-LIKE ) means.

		@param String queue - the name of the queue youd like to invoke
		@param Object message - the props object for this invocation. eg { username: 'bren', password: 'mypass' }
		@param Object options - OPTIONAL header options to pass on with your STOMP request - see https://www.rabbitmq.com/stomp.html for details

		@return Promise - resolves with the CJ parsed reponse from the server.
	**/
	invoke( queue, message, options ) {

		return new Promise( ( resolve, reject ) => {

			options = options || {};
			options[ 'durable' ] = options.durable === undefined ? false : options.durable;
			options[ 'auto-delete' ] = options.autoDelete === undefined ? false : options.autoDelete;
			options[ 'exclusive' ] = options.exclusive === undefined ? false : options.exclusive;

			if( typeof message === 'object' )
				message = CJ.stringify( message );

			this.client.send( '/queue/' + queue, options, message );

		});
	}

	provide( route, options, handler ) {

	}
}
