'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _circularJson = require('circular-json');

var _circularJson2 = _interopRequireDefault(_circularJson);

var _patternbase = require('./patternbase');

var _patternbase2 = _interopRequireDefault(_patternbase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cte = function (_PatternBase) {
	_inherits(cte, _PatternBase);

	function cte(props) {
		_classCallCheck(this, cte);

		return _possibleConstructorReturn(this, (cte.__proto__ || Object.getPrototypeOf(cte)).call(this, props));
	}

	/**
 	Invoke a method in an RPC ( REST-LIKE ) means.
 
 	@param String queue - the name of the queue youd like to invoke
 	@param Object message - the props object for this invocation. eg { username: 'bren', password: 'mypass' }
 	@param Object options - OPTIONAL header options to pass on with your STOMP request - see https://www.rabbitmq.com/stomp.html for details
 
 	@return Promise - resolves with the CJ parsed reponse from the server.
 **/


	_createClass(cte, [{
		key: 'invoke',
		value: function invoke(queue, message, options) {
			var _this2 = this;

			return new Promise(function (resolve, reject) {

				options = options || {};
				options['durable'] = options.durable === undefined ? false : options.durable;
				options['auto-delete'] = options.autoDelete === undefined ? false : options.autoDelete;
				options['exclusive'] = options.exclusive === undefined ? false : options.exclusive;

				if ((typeof message === 'undefined' ? 'undefined' : _typeof(message)) === 'object') message = _circularJson2.default.stringify(message);

				_this2.client.send('/queue/' + queue, options, message);
			});
		}
	}, {
		key: 'provide',
		value: function provide(route, options, handler) {}
	}]);

	return cte;
}(_patternbase2.default);

exports.default = cte;