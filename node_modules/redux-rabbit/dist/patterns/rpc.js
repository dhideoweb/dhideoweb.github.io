'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _circularJson = require('circular-json');

var _circularJson2 = _interopRequireDefault(_circularJson);

var _patternbase = require('./patternbase');

var _patternbase2 = _interopRequireDefault(_patternbase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var rpc = function (_PatternBase) {
	_inherits(rpc, _PatternBase);

	function rpc(props) {
		_classCallCheck(this, rpc);

		return _possibleConstructorReturn(this, (rpc.__proto__ || Object.getPrototypeOf(rpc)).call(this, props));
	}

	/**
 	Invoke a method in an RPC ( REST-LIKE ) means.
 
 	@param String queue - the name of the queue youd like to invoke
 	@param Object message - the props object for this invocation. eg { username: 'bren', password: 'mypass' }
 	@param Function callback - OPTIONAL, a callback to fire with the response ; the response will be CJ parsed
 	@param Object options - OPTIONAL header options to pass on with your STOMP request - see https://www.rabbitmq.com/stomp.html for details
 
 	@return Promise - resolves with the CJ parsed reponse from the server.
 **/


	_createClass(rpc, [{
		key: 'invoke',
		value: function invoke(queue, message, callback, options) {
			var _this2 = this;

			return new Promise(function (resolve, reject) {

				var responseQueue;

				options = options || {};

				options['durable'] = options.durable === undefined ? false : options.durable;
				options['auto-delete'] = options.autoDelete || false;
				options['exclusive'] = options.exclusive || false;

				if (typeof message === 'function') return console.warn('rpc.invoke, message can only be a string, array or object, not a function');

				if ((typeof message === 'undefined' ? 'undefined' : _typeof(message)) === 'object') message = _circularJson2.default.stringify(message);

				responseQueue = 'RESP-' + parseInt(Math.random() * 10000000, 10);
				options['reply-to'] = responseQueue;

				_this2.client.subscribe('/queue/' + responseQueue, function (frame) {

					var response;

					if (frame.body && typeof frame.body === 'string' && frame.body.length > 2) response = _circularJson2.default.parse(frame.body);

					if (callback && typeof callback === 'function') callback(response);

					_this2.client.unsubscribe(responseQueue);
					resolve(response);
				}, { id: responseQueue, 'auto-delete': true });
				_this2.client.send('/queue/' + queue, options, message);
			});
		}
	}, {
		key: 'provide',
		value: function provide(queue) {

			console.log('Frontend RPC consumption is unimplemented at this time.');
		}
	}]);

	return rpc;
}(_patternbase2.default);

exports.default = rpc;